Solution in C++
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
   vector<int>dist(n,1e9);
   int i,neighbour,newdist;
   vector<pair<int,int>>adj[n];
   for(auto it:flights){
   adj[it[0]].push_back({it[1],it[2]});
    }
  queue<pair<int,pair<int,int>>>pq;
   dist[src]=0;
   pq.push({0,{src,0}});
   while(!pq.empty())
   {

       auto it=pq.front();
        pq.pop();
       int stops=it.first;
       int node=it.second.first;
       int dis=it.second.second;
      
       if(stops>k)
       continue;
     for(auto iter:adj[node])
     {
         int neighbour=iter.first;
         int newdist=iter.second;
       if(dist[neighbour]> newdist+dis && stops<=k)
       {
           dist[neighbour]=newdist+dis;
        pq.push({stops+1,{neighbour,newdist+dis}});
       }
   }
   }
    
   if(dist[dst]==1e9)
   return -1;
   return dist[dst];
    }
};
